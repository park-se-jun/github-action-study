# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java cd to EC2

on:
  push:
    branches: [ "develop" ]


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: setup Gradle permission
      run: chmod +x gradlew 
    - name: Execute bootJar
      run: ./gradlew bootJar
      
    - name: Docker build & push
      run: |
        docker build -t ${{secrets.DOCKER_REPO}} .
        echo ${{secrets.DOCKER_TOKEN}} | docker login ${{secrets.GHCR}} -u ${{secrets.DOCKER_USERNAME}} --password-stdin
        docker push ${{secrets.DOCKER_REPO}}
    - name: deploy to ec2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{secrets.HOST}}
        username: ${{secrets.USERNAME}}
        key: ${{secrets.SSH_KEY}}
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{secrets.DOCKER_REPO}}
          touch ./application.yml
          echo "${{secrets.APPLICATION_YML}}" > ./application.yml
          docker run -d --name test-server1 -p 8080:8080 -v $(pwd)/application.yml:/config/application.properties ${{secrets.DOCKER_REPO}}
          
